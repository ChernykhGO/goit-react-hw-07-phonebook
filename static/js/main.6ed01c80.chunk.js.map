{"version":3,"sources":["components/ContactList/ContactList.module.css","components/redux/actions.js","components/redux/operations.js","components/ContactForm/ContactForm.js","components/redux/selectors.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","components/redux/reducer.js","components/redux/store.js","index.js"],"names":["module","exports","fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","changeFilter","axios","defaults","baseURL","ContactForm","useState","name","setName","number","setNumber","contacts","useSelector","state","phonebook","items","dispatch","useDispatch","handleChange","event","target","currentTarget","value","console","warn","reset","onSubmit","preventDefault","find","contact","toLowerCase","alert","post","then","data","catch","error","addContacts","type","onChange","pattern","title","required","placeholder","getFilter","filter","getAllContacts","getVisibleContacts","createSelector","allContacts","normalizedFilter","includes","Filter","contactsSelectors","contactsActions","ContactList","useEffect","a","get","ondeleteContact","id","contactId","delete","className","style","listContact","map","contactItem","onClick","App","createReducer","_","action","payload","combineReducers","log","process","store","configureStore","reducer","contactsReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","logger","devTools","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6ed01c80.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactItem\":\"ContactList_contactItem__3rCRw\",\"listContact\":\"ContactList_listContact__3fXS5\"};","// import types from \"./types\";\r\n// import { v4 as uuidv4 } from \"uuid\";\r\nimport { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport const fetchContactRequest = createAction(\"contacts/fetchContactRequest\");\r\nexport const fetchContactSuccess = createAction(\"contacts/fetchContactSuccess\");\r\nexport const fetchContactError = createAction(\"contacts/fetchContactError\");\r\n\r\nexport const addContactRequest = createAction(\"contacts/addContactRequest\");\r\nexport const addContactSuccess = createAction(\"contacts/addContactSuccess\");\r\nexport const addContactError = createAction(\"contacts/addContactError\");\r\n// const addContacts = createAction(\"contacts/add\", (data) => ({\r\n//   payload: {\r\n//     id: uuidv4(),\r\n//     name: data.name,\r\n//     number: data.number,\r\n//   },\r\n// }));\r\n// const addContacts = (data) => ({\r\n//   type: types.ADD,\r\n//   payload: {\r\n//     id: uuidv4(),\r\n//     name: data.name,\r\n//     number: data.number,\r\n//   },\r\n// });\r\n\r\nexport const deleteContactRequest = createAction(\r\n  \"contacts/deleteContactRequest\"\r\n);\r\nexport const deleteContactSuccess = createAction(\r\n  \"contacts/deleteContactSuccess\"\r\n);\r\nexport const deleteContactError = createAction(\"contacts/deleteContactError\");\r\n// export const deleteContacts = createAction(\"contacts/delete\");\r\n// const deleteContacts = createAction(types.DELETE);\r\n// const deleteContacts = (id) => ({\r\n//   type: types.DELETE,\r\n//   payload: id,\r\n// });\r\n\r\nexport const changeFilter = createAction(\"contacts/changeFilter\");\r\n// const changeFilter = createAction(types.CHANGE_FILTER);\r\n// const changeFilter = (value) => ({\r\n//   type: types.CHANGE_FILTER,\r\n//   payload: value,\r\n// });\r\n// const contactsActions = {\r\n//   // addContacts,\r\n//   deleteContacts,\r\n//   changeFilter,\r\n//   addContactRequest,\r\n//   addContactSuccess,\r\n//   addContactError,\r\n// };\r\n// export default contactsActions;\r\n","import axios from \"axios\";\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n} from \"./actions\";\r\n\r\naxios.defaults.baseURL = \"http://localhost:4040/\";\r\n\r\nexport const featchContacts = () => async (dispatch) => {\r\n  dispatch(fetchContactRequest());\r\n  try {\r\n    const { data } = await axios.get(`/contacts`);\r\n    dispatch(fetchContactSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactError(error));\r\n  }\r\n};\r\n\r\nexport const addContacts = (name, number) => (dispatch) => {\r\n  const contact = {\r\n    name,\r\n    number,\r\n  };\r\n\r\n  dispatch(addContactRequest());\r\n\r\n  axios\r\n    .post(`/contacts`, contact)\r\n    .then(({ data }) => dispatch(addContactSuccess(data)))\r\n    .catch((error) => dispatch(addContactError(error)));\r\n};\r\n\r\nexport const deleteContacts = (contactId) => (dispatch) => {\r\n  dispatch(deleteContactRequest());\r\n\r\n  axios\r\n    .delete(`/contacts/${contactId}`)\r\n    .then(() => dispatch(deleteContactSuccess(contactId)))\r\n    .catch((error) => dispatch(addContactError(error)));\r\n};\r\n\r\n// export default {\r\n//   addContacts,\r\n//   deleteContacts,\r\n//   featchContacts,\r\n// };\r\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useSelector, useDispatch } from \"react-redux\";\n// import ContactsActions from \"../redux/actions\";\nimport { addContacts } from \"../redux/operations\";\n\nfunction ContactForm() {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n  const contacts = useSelector((state) => state.phonebook.items);\n  const dispatch = useDispatch();\n\n  const handleChange = (event) => {\n    switch (event.target.name) {\n      case \"name\":\n        setName(event.currentTarget.value);\n        break;\n      case \"number\":\n        setNumber(event.currentTarget.value);\n        break;\n\n      default:\n        console.warn(`${event.target.value} not found`);\n    }\n  };\n  const handleAddContact = (event) => {\n    event.preventDefault();\n\n    if (\n      contacts.find(\n        (contact) => contact.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      return alert(`${name} is already in contact`);\n    }\n    dispatch(addContacts(name, number));\n    // onSubmit({ name, number });\n    reset();\n  };\n\n  const reset = () => {\n    setName(\"\");\n    setNumber(\"\");\n  };\n\n  return (\n    <form onSubmit={handleAddContact}>\n      <label>\n        Name\n        <input\n          type=\"text\"\n          value={name}\n          onChange={handleChange}\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          placeholder=\"Name Surname\"\n        />\n      </label>\n      <label>\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handleChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          placeholder=\"111-11-11\"\n        />\n      </label>\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n}\n\nexport default ContactForm;\n\nContactForm.propTypes = {\n  contacts: PropTypes.array,\n  name: PropTypes.string,\n  number: PropTypes.number,\n  handleAddContact: PropTypes.func,\n  handleChange: PropTypes.func,\n};\n\n// const mapDispatchToProps = (dispatch) => ({\n//   onSubmit: (data) => dispatch(ContactsActions.addContacts(data)),\n// });\n\n// export default connect(null, mapDispatchToProps)(ContactForm);\n\n// const formSubmit = (data) => {\n//   // console.log(data);\n//   const newContact = {\n//     id: uuidv4(),\n//     name: data.name,\n//     number: data.number,\n//   };\n//   // console.log(newContact);\n//  (contacts) => [newContact, ...contacts]);\n//   } else {\n//     alert(`${data.name} is already in contact`);\n//   }\n","import { createSelector } from \"@reduxjs/toolkit\";\r\n\r\nconst getFilter = (state) => state.phonebook.filter;\r\nconst getAllContacts = (state) => state.phonebook.items;\r\n\r\nconst getVisibleContacts = createSelector(\r\n  [getAllContacts, getFilter],\r\n  (allContacts, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n\r\n    return allContacts.filter((contact) =>\r\n      contact.name.toLowerCase().includes(normalizedFilter)\r\n    );\r\n  }\r\n);\r\n\r\nexport default {\r\n  getFilter,\r\n  getAllContacts,\r\n  getVisibleContacts,\r\n};\r\n\r\n// const getVisibleContacts = (state) => {\r\n//   const filter = getFilter(state);\r\n//   const allContacts = getAllContacts(state);\r\n//   const normalizedFilter = filter.toLowerCase();\r\n\r\n//   return allContacts.filter((contact) =>\r\n//     contact.name.toLowerCase().includes(normalizedFilter)\r\n//   );\r\n// }; перед. с мемоизацией\r\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n// import { connect } from \"react-redux\";\nimport * as contactsActions from \"../redux/actions\";\nimport contactsSelectors from \"../redux/selectors\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nconst Filter = () => {\n  const value = useSelector(contactsSelectors.getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <label>\n      <p>Find contacts by name</p>\n      <input\n        type=\"text\"\n        value={value}\n        onChange={(event) =>\n          dispatch(contactsActions.changeFilter(event.target.value))\n        }\n      />\n    </label>\n  );\n};\nexport default Filter;\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\n// const mapStateToProps = (state) => ({\n//   value: state.phonebook.filter,\n// });\n\n// const mapDispatchToProps = (dispatch) => ({\n//   onChange: (event) =>\n//     dispatch(contactsActions.changeFilter(event.target.value)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n// import * as contactsActions from \"../redux/actions\";\nimport { deleteContacts, featchContacts } from \"../redux/operations\";\nimport contactsSelectors from \"../redux/selectors\";\nimport style from \"./ContactList.module.css\";\nimport PropTypes from \"prop-types\";\n\nconst ContactList = () => {\n  const contacts = useSelector((state) =>\n    // getVisibleContacts(state.phonebook.items, state.phonebook.filter)\n    contactsSelectors.getVisibleContacts(state)\n  );\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(featchContacts());\n  }, [dispatch]);\n\n  const ondeleteContact = (id) => dispatch(deleteContacts(id));\n\n  return (\n    <ul className={style.listContact}>\n      {contacts.map(({ id, name, number }) => (\n        <li key={id} className={style.contactItem}>\n          <p>\n            &#9742; {name}: {number}\n          </p>\n          <button type=\"button\" onClick={() => ondeleteContact(id)}>\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default ContactList;\n\nContactList.propTypes = {\n  ondeleteContact: PropTypes.func,\n  contacts: PropTypes.array,\n};\n\n// const getVisibleContacts = (allContacts, filter) => {\n//   const normalizedFilter = filter.toLowerCase();\n// return allContacts.filter((contact) =>\n//   contact.name.toLowerCase().includes(normalizedFilter)\n// );\n// };\n\n// const mapStateToProps = (state) => ({\n//   contacts: getVisibleContacts(state.phonebook.items, state.phonebook.filter),\n// });\n\n// const mapStateToProps = (state) => {\n//   const { filter, items } = state.phonebook;\n//   const normalizedFilter = filter.toLowerCase();\n//   const visibleContacts = getVisibleContacts(items, filter);\n//   return {\n//     contacts: state.phonebook.items,\n//   };\n// };\n\n// const mapDispatchToProps = (dispatch) => ({\n//   ondeleteContact: (id) => dispatch(contactsActions.deleteContacts(id)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import ContactForm from \"./components/ContactForm\";\nimport Filter from \"./components/Filter\";\nimport ContactList from \"./components/ContactList\";\nimport \"./App.css\";\n\nexport default function App() {\n  return (\n    <div>\n      <div className=\"App\">\n        <h1>Phonebook</h1>\n        {/* <ContactForm onSubmit={formSubmit} /> */}\n        <ContactForm />\n        <h2>Contacts</h2>\n\n        <Filter\n        //  value={filter} onChange={changeFilter}\n        />\n        <ContactList\n        // contacts={visibleContacts()}\n        // ondeleteContact={deleteContact}\n        />\n      </div>\n    </div>\n  );\n}\n\n// export default memo(App);\n// const [contacts, setContacts] = useState(() => {\n//   return JSON.parse(window.localStorage.getItem(\"contacts\")) ?? \"\";\n// });\n\n// useEffect(() => {\n//   window.localStorage.setItem(\"contacts\", JSON.stringify(contacts));\n// }, [contacts]);\n\n// const formSubmit = (data) => {\n//   // console.log(data);\n//   const newContact = {\n//     id: uuidv4(),\n//     name: data.name,\n//     number: data.number,\n//   };\n//   // console.log(newContact);\n//  (contacts) => [newContact, ...contacts]);\n//   } else {\n//     alert(`${data.name} is already in contact`);\n//   }\n// };\n\n// const deleteContact = (contactId) => {\n//   setContacts(contacts.filter((contact) => contact.id !== contactId));\n// };\n\n// const changeFilter = (event) => {\n//   setFilter(event.currentTarget.value);\n// };\n\n// const visibleContacts = () => {\n//   const normalizedFilter = filter.toLowerCase();\n//   return contacts.filter((contact) =>\n//     contact.name.toLowerCase().includes(normalizedFilter)\n//   );\n// };\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\n// import actions from \"./actions\";\r\nimport {\r\n  changeFilter,\r\n  addContactSuccess,\r\n  fetchContactError,\r\n  deleteContactSuccess,\r\n  fetchContactSuccess,\r\n  fetchContactRequest,\r\n} from \"./actions\";\r\n\r\nconst items = createReducer([], {\r\n  [fetchContactSuccess]: (_, action) => action.payload,\r\n  [addContactSuccess]: (state, action) => [...state, action.payload],\r\n  [deleteContactSuccess]: (state, action) =>\r\n    state.filter((contact) => contact.id !== action.payload),\r\n});\r\n\r\nconst filter = createReducer(\"\", {\r\n  [changeFilter]: (_, action) => action.payload,\r\n});\r\n\r\nconst error = createReducer(null, {\r\n  [fetchContactError]: (_, action) => action.payload,\r\n  [fetchContactRequest]: () => null,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n  error,\r\n});\r\n\r\n// import types from \"./types\";\r\n// console.log(actions.addContacts.type);\r\n\r\n// {\r\n//     phonebook: {\r\n//         items: '',\r\n//         filter: ''\r\n//     }\r\n// }\r\n\r\n// const items = (state = [], { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.ADD:\r\n//       return [...state, payload];\r\n\r\n//     case types.DELETE:\r\n//       return state.filter((contact) => contact.id !== payload);\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const filter = (state = \"\", { type, payload }) => {\r\n//   switch (type) {\r\n//     case \"contacts/changeFilter\":\r\n//       return payload;\r\n\r\n//     default:npm i redux\r\n//       return state;\r\n//   }\r\n// };\r\n","// import { combineReducers } from \"redux\";\r\nimport {\r\n  configureStore,\r\n  // combineReducers,\r\n  // getDefaultMiddleware\r\n} from \"@reduxjs/toolkit\";\r\nimport logger from \"redux-logger\";\r\n// import { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport contactsReducer from \"./reducer\";\r\n// import storage from \"redux-persist/lib/storage\";\r\nimport {\r\n  // persistStore,\r\n  // persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\n\r\nconsole.log(process.env.NODE_ENV);\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    // phonebook: persistReducer(phonebookPersistConfig, contactsReducer),\r\n    phonebook: contactsReducer,\r\n  },\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware({\r\n      serializableCheck: {\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n      },\r\n    }).concat(logger),\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\nexport default store;\r\n\r\n// const phonebookPersistConfig = {\r\n//   key: \"phonebook\",\r\n//   storage,\r\n//   blacklist: [\"filter\"],\r\n// };\r\n\r\n// const persistor = persistStore(store);\r\n// export default { store, persistor };\r\n\r\n// const rootReducer = combineReducers({\r\n//   // phonebook: contactsReducer,\r\n//   phonebook: persistReducer(persistConfig, contactsReducer),\r\n// });\r\n// const persistedReducer = persistReducer(persistConfig, rootReducer);\r\n// const rootReducer = combineReducers({\r\n//   phonebook: contactsReducer,\r\n// });\r\n// const store = createStore(\r\n//   rootReducer,\r\n//   composeWithDevTools()\r\n// );\r\n// console.log(getDefaultMiddleware());\r\n// const middlewere = [...getDefaultMiddleware(), logger];\r\n\r\n// const myMiddlewere = (store) => (next) => (action) => {\r\n//   console.log(\"Моя прослойка\", action);\r\n//   next(action);\r\n// };\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n// import { PersistGate } from \"redux-persist/integration/react\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport store from \"./components/redux/store\";\n// import { myAction, myAction2 } from \"./components/redux/actions\";\n// console.log(store);\n// console.log(store.getState());\n// store.dispatch(myAction(5));\n// console.log(store.dispatch(myAction2));\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n    ;\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}